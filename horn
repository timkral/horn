#!/usr/bin/env python

import argparse

from heimdall.dataload.ccollabdataloader import CCollabReview
from heimdall.dataload.gitdataloader import *
from heimdall.dataload.couchdbclient import CouchDBClient
from heimdall.setup.heimdallconfig import HeimdallConfig
from heimdall.setup.heimdallverifier import HeimdallVerifier

class HornException(Exception):
    def __init__(self, msg):
        self.msg = msg
    def __str__(self):
        return repr(self.msg)

##### Horn helper functions #####
def __get_config():
    horn_dir = os.path.dirname(os.path.realpath(__file__)) # directory where horn sits
    return HeimdallConfig(config_dir=horn_dir)

def __load_config():
    config = __get_config()
    if not config.exists():
        raise HornException('No configuration found. Run: horn config')

    config.load()
    return config

##### Horn callback functions #####
def config(args):
    config = __get_config()

    if args.purge:
        config.purge()
        print 'Configuration purged'
    elif not args.view:
        config.init()
        print json.dumps(config.config_dict, indent=4, sort_keys=True)
    elif not config.exists(): # args.view and not config.exists()
        print 'No configuration available for viewing. Run: horn config'
    else: # args.view
        config.load()
        print json.dumps(config.config_dict, indent=4, sort_keys=True)

def loadcommit(args):
    config = __load_config()

    remote_git_repo = RemoteGitRepo(config)
    local_git_repo = LocalGitRepo(config)
    git_commit = GitCommit(remote_git_repo, local_git_repo, args.sha1)
    git_commit_dict = git_commit.load()

    client = CouchDBClient(config)
    load_doc_dict = client.load_doc(git_commit.sha1, git_commit_dict)
    print json.dumps(load_doc_dict, sort_keys=True)

def loadreview(args):
    config = __load_config()

    ccollab_review = CCollabReview(args.review_id)
    ccollab_review_dict = ccollab_review.load()

    client = CouchDBClient(config)
    load_doc_dict = client.load_doc(ccollab_review.review_id, ccollab_review_dict)
    print json.dumps(load_doc_dict, sort_keys=True)

def push(args):
    config = __load_config()

    client = CouchDBClient(config)
    client.push()
    print 'Success!'

def sync(args):
    config = __load_config()

    client = CouchDBClient(config)
    client.sync()
    print 'Success!'

def verify(args):
    config = __get_config()
    verifier = HeimdallVerifier(config)

    verifier.verify()

##### Main entry point #####
if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='horn')
    subparsers = parser.add_subparsers(help='sub-command help')

    parser_config = subparsers.add_parser('config', help='setup heimdall configuration')
    parser_config.add_argument('--view', dest='view', action='store_true')
    parser_config.add_argument('--purge', dest='purge', action='store_true')
    parser_config.set_defaults(func=config)

    # TODO: Add git polling
    parser_loadcommit = subparsers.add_parser('loadcommit', help='load a single commit document into CouchDB')
    parser_loadcommit.add_argument('sha1', help='sha1 of git commit')
    parser_loadcommit.set_defaults(func=loadcommit)

    # TODO: Add ccollab polling
    parser_loadreview = subparsers.add_parser('loadreview', help='load a single review document into CouchDB')
    parser_loadreview.add_argument('review_id', help='id of ccollab review')
    parser_loadreview.set_defaults(func=loadreview)

    parser_push = subparsers.add_parser('push', help='push design documents to CouchDB')
    parser_push.set_defaults(func=push)

    parser_sync = subparsers.add_parser('sync', help='sync design documents from CouchDB')
    parser_sync.set_defaults(func=sync)

    parser_verify = subparsers.add_parser('verify', help='verify that your environment is correctly setup to use heimdall')
    parser_verify.set_defaults(func=verify)

    args = parser.parse_args()
    args.func(args)